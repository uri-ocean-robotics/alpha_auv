##
# Thruster IDs
# Each thruster has its unique ID. These unique IDs
# will be used for configuring them. In the rest of the
# configuration file, those IDs must match.
#
# There are no defaults for parameters below.
##
thruster_ids:
- main
- horizontal
- vertical

##
# Thruster thrust command topic names.
# Each topic should have type of std_msgs/Float64
# Thruster command messages will be sent out to this
# topic addresses.
#
# There are no defaults for parameters below.
##
thruster_command_topics:
  main: control/thruster/main
  horizontal: control/thruster/horizontal
  vertical: control/thruster/vertical

##
# Force from each thruster
##
thruster_force_topics:
  main: control/force/main
  horizontal: control/force/horizontal
  vertical: control/force/vertical

##
# Control allocation matrix generator type
#
# Possible types: "tf" or "user"
# Default value: "tf"
#
# if "matrix" is selected, control allocation matrix will
# be generated based on "control_allocation_matrix" object
# if "tf" is selected, control allocation matrix will be
# generated automatically based on transform tree defined
# in "control_tf" object.
##
generator_type: user

##
# "tf_prefix" for transform tree
# There is no default for parameter below.
##
tf_prefix: alpha

##
# Center of gravity link name in transform tree
# There is no default for parameter below.
##
cg_link: cg_link

##
# World link
# There is no default for parameter below.
##
world_link: world_ned

##
# Odometry source
# There is no default for parameter below.
##
odometry_source: /dynamics/odometry

##
# Control Transform Tree
##
control_tf:
  # Thruster links in transform tree
  main: main_thruster_link
  horizontal: horizontal_thruster_link
  vertical: vertical_thruster_link

# Control rule that described by each index
#  1. Roll
#  2. Pitch
#  3. Yaw
#  4. u, X speed
#  5. v, Y speed
#  6. w, Z speed
control_allocation_matrix:
  main:
    [0.0, 0.0, 0.0, 1.0, 0.0, 0.0]
  horizontal:
    [0.0, 0.0, 0.48, 0.0, 1.0, 0.0]
  vertical:
    [0.0, 0.39, 0.0, 0.0, 0.0, -1.0]

##
# Polynomials for each thruster.
#
# Quadratic Programming Optimization computes the thrust
# required. We need to turn that number into thruster command.
# Setpoint commands in this system defined between -1 and 1.
#
# y axis of the polynomial , f(x) = y, should be in Newton.
#
# Take the polynomial
# f(x) = a_n x^n + a_(n-1) x^(n-1) + ... + a_1 x + a_0
#
# Array would hold the lower degrees in lower indexes. Shown below:
# [a_0, a_1, ... ,a_(n-1), a(n)]
#
# For T200 bluerobotics thrusters:
#   f(x) = a5*x^5 + a4*x^4 + a3*x^3 + a2*x^2 + a1*x + a0
# Curve fitting results:
#   a0 =      0.06165
#   a1 =      20.32
#   a2 =      9.632
#   a3 =      93.05
#   a4 =      -2.856
#   a5 =      -74.1
##
thruster_polynomials:
  main:       [0.06165, 20.32, 9.632, 93.05, -2.856, -74.1]
  horizontal: [0.06165, 20.32, 9.632, 93.05, -2.856, -74.1]
  vertical:   [0.06165, 20.32, 9.632, 93.05, -2.856, -74.1]


##
# PID gains for each degree of freedom
##
pid:
  x:      {p: 3, i: 0.5, d: 5, i_max: 10, i_min: -10}
  y:      {p: 3, i: 0.5, d: 5, i_max: 10, i_min: -10}
  z:      {p: 5, i: 1, d: 10, i_max: 10, i_min: -10}
  roll:   {p: 0, i: 0, d: 0, i_max: 10, i_min: -10}
  pitch:  {p: 1, i: 0, d: 0, i_max: 10, i_min: -10}
  yaw:    {p: 6.0, i: 0, d: 1.0, i_max: 20, i_min: -20}
  u:      {p: 200, i: 0, d: 0, i_max: 10, i_min: -10}
  v:      {p: 5, i: 4, d: 1, i_max: 10, i_min: -10}
  w:      {p: 5, i: 4, d: 1, i_max: 10, i_min: -10}

types:
  flight:
    - u
    - pitch
    - yaw

  hold:
    - x
    - y
    - z
    - yaw
    - pitch